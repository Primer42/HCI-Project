#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Assignment 5: Medium Fidelity Prototype 
\begin_inset Newline newline
\end_inset

Job Search Tracking
\end_layout

\begin_layout Author
William Richard and Guvenc Usanmaz
\end_layout

\begin_layout Section
Prototype Video
\end_layout

\begin_layout Standard
A video of the prototype being used can be found here.
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://youtu.be/gJs-ZeQcFUA
\end_layout

\end_inset


\end_layout

\begin_layout Section
Features from Previous Assignments
\end_layout

\begin_layout Standard
We incorporated much of the design from previous assignments into this prototype.
 The syntactic flow of the user actions, as well as the general layout of
 the pages have remained the same from the original specifications and the
 storyboards.
 We realized that the ability to delete objects had not been included in
 the previous specifications, so we decided to add that functionality.
 We also discussed about an alternative design where system is organized
 around operations instead of objects.
 There would be Create, Edit, View and Associate pages instead of objects
 pages.
 However, we decided that this design would be more confusing for users
 and sticked with old design.
 
\end_layout

\begin_layout Section
Differences from design and implementation
\end_layout

\begin_layout Standard
There aren't many features that are different from the design, rather there
 are things that we were unable to implement.
 These include, but are not limited to
\end_layout

\begin_layout Itemize
Editing objects
\end_layout

\begin_layout Itemize
Specifying relations between objects
\end_layout

\begin_layout Itemize
Full insert functionality for objects.
 When a user wants to add a new object, the form is already populated with
 a sample object of the correct type.
 There is only one object of each type that can be added.
\end_layout

\begin_layout Itemize
Deleting any object.
 The user can delete the sample object they added in a previous step, but
 they are not able to delete objects that were in the system when they started.
\end_layout

\begin_layout Itemize
Contact import.
\end_layout

\begin_layout Section
Limitations of Prototype Caused by the Software
\end_layout

\begin_layout Standard
We decided to use HTML to prototype our project.
 With just HTML, without any database or other code running, we were unable
 to have truely dynamic pages.
 As mentioned above, we didn't allow the user to add any arbitrary object
 - when they try to add an object, the form is already filled in.
 Furthermore, 
\strikeout on
they
\strikeout default
 are only able to add one object of each type - one company, one job, one
 note and one person.
 
\end_layout

\begin_layout Standard
The main problem to overcome to simulate a dynamic system was storing the
 system state.
 Once the user adds a company, they should be able to navigate to any other
 page, and still have the company they added present when they return to
 the company list page.
 We did two things that allowed us to store system state, and easily simulate
 a dymanic system without having any code running in real time.
 First, we made a page corresponding to each possible page the user may
 see - the company page with just the canned data, and the company page
 with the same data and the single new object added.
 We made pages like this for every object, as well as an 'add object' page
 for each object.
 We then wrote a script that made many copies of these original files, putting
 them in a directory structure that stores the system state.
 
\end_layout

\begin_layout Standard
The state denoted of if each of the objects had been added or not - whether
 the company had been added, whether the job had been added and so on.
 Since there are 4 objects, there are 16 possible states.
 We represent the state as a string with a letter for each object, if it
 has been added.
 For example, if the company and job had been added but the person and note
 had not, the state would be 'cj'.
 If the person is then added, the state is changed to 'cjp'.
 If, finally, the note is added, the state is 'cjnp'.
 The script made sure that the 
\begin_inset Quotes eld
\end_inset

Add Object
\begin_inset Quotes erd
\end_inset

 page linked to the correct new state directory when it copies that page
 from the original location.
 Thus, when the user adds the object, they get redirected to a page that
 looks identical to the original list page, but in a different directory
 that reflects the new state, and the object added to the list.
 When they navigate to other pages, without adding or removing objects,
 they are staying on pages in the same directory, so the state is not lost.
 Removing the added object was achieved in a similar way.
\end_layout

\begin_layout Section
Demo Creation Script Usage
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
The demo creation script relies on Python version 2.7.
 It can be downloaded from here, or using your system's package manager.
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.python.org/download/releases/2.7/
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Running the script
\end_layout

\begin_layout Standard
Execute the script by calling:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python2.7 <Path to script location>/create_demo.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will create a directory called 
\begin_inset Quotes eld
\end_inset

demo
\begin_inset Quotes erd
\end_inset

 in the same directory as the 
\begin_inset Quotes eld
\end_inset

create_demo.py
\begin_inset Quotes erd
\end_inset

 script.
 To run the demo, simply go to the demo directory and open the demo/START/start.h
tml in your web browser.
\end_layout

\end_body
\end_document
